return {
	{
		"mfussenegger/nvim-dap",
		dependencies = { "nvim-dap-lldb", "nvim-neotest/nvim-nio" },
		config = function()
			local dap = require("dap")
			local dapui = require("dapui")

			-- Setup DAP UI
			dapui.setup()

			-- Auto open/close UI on debug start/stop
			dap.listeners.after.event_initialized["dapui_config"] = function()
				dapui.open()
			end
			dap.listeners.before.event_terminated["dapui_config"] = function()
				dapui.close()
			end
			dap.listeners.before.event_exited["dapui_config"] = function()
				dapui.close()
			end

			-- Keymaps for Debugging
			local keymap = vim.keymap.set
			keymap("n", "<F5>", require("dap").continue, { desc = "Start/Continue Debugging" })
			keymap("n", "<F10>", require("dap").step_over, { desc = "Step Over" })
			keymap("n", "<F11>", require("dap").step_into, { desc = "Step Into" })
			keymap("n", "<F12>", require("dap").step_out, { desc = "Step Out" })
			keymap("n", "<Leader>db", require("dap").toggle_breakpoint, { desc = "Toggle Breakpoint" })
			keymap("n", "<Leader>dB", function()
				require("dap").set_breakpoint(vim.fn.input("Breakpoint condition: "))
			end, { desc = "Conditional Breakpoint" })
			keymap("n", "<Leader>dr", require("dap").repl.open, { desc = "Open Debug Console" })
		end,
	},

	{
		"julianolf/nvim-dap-lldb",
		dependencies = { "mfussenegger/nvim-dap", "williamboman/mason.nvim" },
		opts = {
			-- Correct the path to the codelldb executable
		},
		config = function()
			local mason = require("mason")

			mason.ensure_installed({ "codelldb" }, {
				automatic_setup = true,
				handler = function(package)
					if package.name == "codelldb" then
						local dap_lldb = require("dap-lldb")
						local codelldb_path = mason.get_package("codelldb"):get_install_path()
							.. "/extension/adapter/codelldb"

						dap_lldb.setup({
							configurations = {
								c = {
									{
										name = "Launch Debugger",
										type = "lldb",
										request = "launch",
										cwd = "${workspaceFolder}",
										program = function()
											local out = vim.fn.system({ "make", "debug" })
											if vim.v.shell_error ~= 0 then
												vim.notify(out, vim.log.levels.ERROR)
												return nil
											end
											return "./a.out"
										end,
									},
								},
								cpp = {
									{
										name = "Launch Debugger",
										type = "lldb",
										request = "launch",
										cwd = "${workspaceFolder}",
										program = function()
											local out = vim.fn.system({ "make", "debug" })
											if vim.v.shell_error ~= 0 then
												vim.notify(out, vim.log.levels.ERROR)
												return nil
											end
											return "./a.out"
										end,
									},
								},
								rust = {
									{
										name = "Launch Debugger",
										type = "lldb",
										request = "launch",
										cwd = "${workspaceFolder}",
										program = function()
											return vim.fn.input(
												"Path to executable: ",
												vim.fn.getcwd() .. "/target/debug/",
												"file"
											)
										end,
									},
								},
							},
						})
					end
				end,
			})
		end,
	},
	{
		"rcarriga/nvim-dap-ui",
		dependencies = { "mfussenegger/nvim-dap" },
		config = function()
			local dapui = require("dapui")
			dapui.setup()
		end,
	},
	{
		"nvim-neotest/nvim-nio",
	},
}
